name: Student Tracker Project - FastAPI CI/CD

on:
  # Specific triggers, not everything
  push:
    branches: [ development, production ]
    paths:
      - '6.0 - Git Actions/student-project-tracker/**'
  pull_request:
    branches: [ development, production ]
    paths:
      - '6.0 - Git Actions/student-project-tracker/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: student-tracker

jobs:
  # Logical job separation - test: Fast feedback first, build: then build, deploy: Finally deploy...
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: '6.0 - Git Actions/student-project-tracker'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests (if you have any)
      run: |
        # Add your test commands here
        python -m pytest || echo "No tests found - skipping"

  build:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: '6.0 - Git Actions/student-project-tracker'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: '6.0 - Git Actions/student-project-tracker'
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "Image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:production"
        # Add your deployment commands here (e.g., kubectl, docker-compose, etc.)
        
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for application to start..."
        sleep 30
        
    - name: Health Check
      run: |
        echo "üîç Running health checks..."
        # Replace with your actual app URL
        APP_URL="http://your-app-url.com"
        
        # Basic health check
        if curl -f "$APP_URL/health" --max-time 10; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi
        
    - name: API Smoke Tests
      run: |
        echo "üß™ Running smoke tests..."
        APP_URL="http://your-app-url.com"
        
        # Test main endpoint
        if curl -f "$APP_URL/" --max-time 10; then
          echo "‚úÖ Main endpoint working"
        else
          echo "‚ùå Main endpoint failed"
          exit 1
        fi
        
        # Test API endpoints
        if curl -f "$APP_URL/register" --max-time 10; then
          echo "‚úÖ Register endpoint working"
        else
          echo "‚ùå Register endpoint failed"
          exit 1
        fi
        
    - name: Performance Check
      run: |
        echo "‚ö° Running performance check..."
        APP_URL="http://your-app-url.com"
        
        # Check response time (should be under 2 seconds)
        RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$APP_URL/health")
        echo "Response time: ${RESPONSE_TIME}s"
        
        if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
          echo "‚úÖ Performance check passed"
        else
          echo "‚ö†Ô∏è Warning: Slow response time"
        fi
        
    - name: Deployment Success Notification
      if: success()
      run: |
        echo "üéâ Deployment successful!"
        echo "‚úÖ All health checks passed"
        echo "üåê Application is live at: http://your-app-url.com"
        
    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "üö® Deployment failed!"
        echo "‚ùå Health checks failed - rolling back recommended"
        exit 1
